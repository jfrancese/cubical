module manifold where
import etale
import algebra
import equiv

HomogeneousStructure (V: U): U = 
  = (X:U)
  * (id: X)
  * (mu: X -> X -> X)
  * (H: hasIdentity M mu e)
  * (inv: isEquiv X X \x.mu x)
  
et (A B: U): EtaleMap A B -> (A -> B) =
  = (f: A -> B)
  * isÃ‰taleMap A B f

isSurjective (A B: U) (f: A -> B): U
  = (b: B) 
  * pTrunc (fiber A B f b)

manifold (V': U) (V: HomogeneousStructure V'): U
  = (M: U)
  * (W: U)
  * (w: EtaleMap W M)
  * (covers: isSurjective W M (et W M w))
  * (   EtaleMap W V')

